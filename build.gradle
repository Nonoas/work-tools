import io.github.fvarrui.javapackager.gradle.PackageTask
import io.github.fvarrui.javapackager.model.MacConfig
import io.github.fvarrui.javapackager.model.WindowsConfig

buildscript {
    repositories {
        mavenLocal {
            url = uri('file://D:/Runtime/Repo/mvn_repo')
        }
        mavenCentral()
    }
    dependencies {
        classpath 'io.github.fvarrui:javapackager:1.7.5'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'

group 'indi.nonoas'
version '1.3.3'

sourceCompatibility = '17'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}


repositories {
    mavenLocal {
        url = uri('file://D:/Runtime/Repo/mvn_repo')
    }
    mavenCentral()
}

javafx {
    version = "17.0.0.1"
    modules = ['javafx.controls', 'javafx.swing']
}

dependencies {
    implementation 'com.melloware:jintellitype:1.4.0'
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.h2database:h2:2.2.220'
// https://mvnrepository.com/artifact/com.alibaba.fastjson2/fastjson2
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.47'
    implementation 'net.sf.dozer:dozer:5.4.0'
    implementation 'org.freemarker:freemarker:2.3.30'
    implementation 'org.flywaydb:flyway-core:10.10.0'
    implementation 'cn.hutool:hutool-db:5.8.25'
    // https://mvnrepository.com/artifact/com.googlecode.juniversalchardet/juniversalchardet
    implementation 'com.googlecode.juniversalchardet:juniversalchardet:1.0.3'
    implementation 'io.github.nonoas:jfx-flat-ui:1.0.1'

    implementation 'org.openjfx:javafx-controls:17.0.0.1'
    implementation 'org.openjfx:javafx-fxml:17.0.0.1'

}

mainClassName = 'indi.nonoas.worktools.MainKt'

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': 'indi.nonoas.worktools.MainKt'
    }
    from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}

tasks.register('packageMyApp', PackageTask) {
    dependsOn clean
    dependsOn jar

    // mandatory
    mainClass = mainClassName
    // optional
    bundleJre = false

    generateInstaller = false
    administratorRequired = false
    additionalResources = [file('func/')]
    macConfig(({} as Closure<MacConfig>))
    winConfig(({
        createZipball = true
    } as Closure<WindowsConfig>))
}

